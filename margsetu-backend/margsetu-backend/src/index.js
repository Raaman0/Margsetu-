// üåç Load Environment Variables
import dotenv from "dotenv";
dotenv.config();

// üîß Core Modules
import express from "express";
import cors from "cors";
import connectDB from "./config/db.js";

// ‚úÖ Route Imports
import authRoutes from "./routes/authRoutes.js";
import pitchRoutes from "./routes/pitchRoutes.js";
import commentRoutes from "./routes/commentRoutes.js";
import aiEvalRoutes from "./routes/aiEvalRoutes.js"; // üß† AI Evaluation

// üöÄ Initialize App
const app = express();

// üõ°Ô∏è Middlewares
app.use(cors());
app.use(express.json());

// üßæ Request Logger Middleware
app.use((req, res, next) => {
  console.log(`üåê [${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
  next();
});

// üîó Mount API Routes
app.use("/api/auth", authRoutes);         // üîê Auth & Users
app.use("/api/pitches", pitchRoutes);     // üöÄ Startup Pitch Routes
app.use("/api/comments", commentRoutes);  // üí¨ Comments
app.use("/api/eval", aiEvalRoutes);       // üß† AI Evaluation (Pitch Score)
// app.use("/api/ai", aiRoutes);          // ü§ñ Future: AI Chatbot

// üìç Root Route (for sanity check)
app.get("/", (req, res) => {
  res.send("üöÄ MargSetu Backend API is Live!");
});

// ‚ùå 404 Handler
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: "Endpoint not found",
    path: req.originalUrl,
  });
});

// üöÄ Launch Server
const PORT = process.env.PORT || 5000;

connectDB()
  .then(() => {
    app.listen(PORT, () => {
      console.log(`\n‚úÖ Server running at: http://localhost:${PORT}`);
      console.log("üì° ROUTES:");
      console.log("‚Üí /api/auth       üîê Auth Routes");
      console.log("‚Üí /api/pitches    üöÄ Startup Pitches");
      console.log("‚Üí /api/comments   üí¨ Comments");
      console.log("‚Üí /api/eval       üß† AI Evaluation");
      console.log("");
    });
  })
  .catch((err) => {
    console.error("‚ùå MongoDB Connection Failed:", err.message);
    process.exit(1);
  });
